// 인터페이스 기본(1)

package main

import (
	"fmt"
	_ "fmt"
)

// 빈 인터페이스
type test interface {
}

func main() {
	// 인터페이스
	// - 객체의 동작을 표현, 골격
	// - 단순히 동작에 대한 방법만 표시
	// - 추상화 제공
	// - 인터페이스의 메소드를 구현한 타입은 인터페이스로 사용 가능
	// - golang 을 유연하게 사용 가능
	// - 덕타이핑 : golang의 독창적인 특성
	// - 인터페이스 -> java(전략패턴, 템플릿메소드, 팩토리메소드패턴, 어댑터패턴...)
	// - 디자인 패턴 측면에서 Client 입장 -> 메소드의 구체적인 클래스를 몰라도 인터페이스에 정의된 메서드를 사용하는 객체 보장
	//   -> 클래스간 결합도 감소 -> 유지보수성 향상, 기능 추가의 용이성 -> 독립적인 프로그래밍 기능

	// 예제 1. 선언방법
	/*
		type [인터페이스 명] interface {
			메서드1() [반환 값] (타입명)
			메서드2() // 반환 값 없을 경우
		}
	*/

	// 예제 2.
	var t test
	fmt.Println("test : ", t)

}
